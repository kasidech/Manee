//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Manee.INV.DB.Models
{
    public partial class Location
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> LocationTypeId
        {
            get { return _locationTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_locationTypeId != value)
                    {
                        if (LocationType != null && LocationType.Id != value)
                        {
                            LocationType = null;
                        }
                        _locationTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _locationTypeId;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<DeliveryNote> DeliveryNotes
        {
            get
            {
                if (_deliveryNotes == null)
                {
                    var newCollection = new FixupCollection<DeliveryNote>();
                    newCollection.CollectionChanged += FixupDeliveryNotes;
                    _deliveryNotes = newCollection;
                }
                return _deliveryNotes;
            }
            set
            {
                if (!ReferenceEquals(_deliveryNotes, value))
                {
                    var previousValue = _deliveryNotes as FixupCollection<DeliveryNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeliveryNotes;
                    }
                    _deliveryNotes = value;
                    var newValue = value as FixupCollection<DeliveryNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeliveryNotes;
                    }
                }
            }
        }
        private ICollection<DeliveryNote> _deliveryNotes;
    
        public virtual ICollection<DeliveryNote> DeliveryNotes1
        {
            get
            {
                if (_deliveryNotes1 == null)
                {
                    var newCollection = new FixupCollection<DeliveryNote>();
                    newCollection.CollectionChanged += FixupDeliveryNotes1;
                    _deliveryNotes1 = newCollection;
                }
                return _deliveryNotes1;
            }
            set
            {
                if (!ReferenceEquals(_deliveryNotes1, value))
                {
                    var previousValue = _deliveryNotes1 as FixupCollection<DeliveryNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeliveryNotes1;
                    }
                    _deliveryNotes1 = value;
                    var newValue = value as FixupCollection<DeliveryNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeliveryNotes1;
                    }
                }
            }
        }
        private ICollection<DeliveryNote> _deliveryNotes1;
    
        public virtual LocationType LocationType
        {
            get { return _locationType; }
            set
            {
                if (!ReferenceEquals(_locationType, value))
                {
                    var previousValue = _locationType;
                    _locationType = value;
                    FixupLocationType(previousValue);
                }
            }
        }
        private LocationType _locationType;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLocationType(LocationType previousValue)
        {
            if (previousValue != null && previousValue.Locations.Contains(this))
            {
                previousValue.Locations.Remove(this);
            }
    
            if (LocationType != null)
            {
                if (!LocationType.Locations.Contains(this))
                {
                    LocationType.Locations.Add(this);
                }
                if (LocationTypeId != LocationType.Id)
                {
                    LocationTypeId = LocationType.Id;
                }
            }
            else if (!_settingFK)
            {
                LocationTypeId = null;
            }
        }
    
        private void FixupDeliveryNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeliveryNote item in e.NewItems)
                {
                    item.Location = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Location, this))
                    {
                        item.Location = null;
                    }
                }
            }
        }
    
        private void FixupDeliveryNotes1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeliveryNote item in e.NewItems)
                {
                    item.Location1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Location1, this))
                    {
                        item.Location1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
