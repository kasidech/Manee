//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Manee.INV.DB.Models
{
    public partial class DeliveryNote
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Sender
        {
            get { return _sender; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_sender != value)
                    {
                        if (Worker != null && Worker.Id != value)
                        {
                            Worker = null;
                        }
                        _sender = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _sender;
    
        public virtual Nullable<int> Reciever
        {
            get { return _reciever; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_reciever != value)
                    {
                        if (Worker1 != null && Worker1.Id != value)
                        {
                            Worker1 = null;
                        }
                        _reciever = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _reciever;
    
        public virtual Nullable<int> Origin
        {
            get { return _origin; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_origin != value)
                    {
                        if (Location != null && Location.Id != value)
                        {
                            Location = null;
                        }
                        _origin = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _origin;
    
        public virtual Nullable<int> Destination
        {
            get { return _destination; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_destination != value)
                    {
                        if (Location1 != null && Location1.Id != value)
                        {
                            Location1 = null;
                        }
                        _destination = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _destination;
    
        public virtual Nullable<int> CarId
        {
            get { return _carId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_carId != value)
                    {
                        if (Car != null && Car.Id != value)
                        {
                            Car = null;
                        }
                        _carId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _carId;
    
        public virtual Nullable<System.DateTime> DeliveryDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ReceiveDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TDate
        {
            get;
            set;
        }
    
        public virtual string Driver
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Car Car
        {
            get { return _car; }
            set
            {
                if (!ReferenceEquals(_car, value))
                {
                    var previousValue = _car;
                    _car = value;
                    FixupCar(previousValue);
                }
            }
        }
        private Car _car;
    
        public virtual Location Location
        {
            get { return _location; }
            set
            {
                if (!ReferenceEquals(_location, value))
                {
                    var previousValue = _location;
                    _location = value;
                    FixupLocation(previousValue);
                }
            }
        }
        private Location _location;
    
        public virtual Location Location1
        {
            get { return _location1; }
            set
            {
                if (!ReferenceEquals(_location1, value))
                {
                    var previousValue = _location1;
                    _location1 = value;
                    FixupLocation1(previousValue);
                }
            }
        }
        private Location _location1;
    
        public virtual Worker Worker
        {
            get { return _worker; }
            set
            {
                if (!ReferenceEquals(_worker, value))
                {
                    var previousValue = _worker;
                    _worker = value;
                    FixupWorker(previousValue);
                }
            }
        }
        private Worker _worker;
    
        public virtual Worker Worker1
        {
            get { return _worker1; }
            set
            {
                if (!ReferenceEquals(_worker1, value))
                {
                    var previousValue = _worker1;
                    _worker1 = value;
                    FixupWorker1(previousValue);
                }
            }
        }
        private Worker _worker1;
    
        public virtual ICollection<ReceiptNote> ReceiptNotes
        {
            get
            {
                if (_receiptNotes == null)
                {
                    var newCollection = new FixupCollection<ReceiptNote>();
                    newCollection.CollectionChanged += FixupReceiptNotes;
                    _receiptNotes = newCollection;
                }
                return _receiptNotes;
            }
            set
            {
                if (!ReferenceEquals(_receiptNotes, value))
                {
                    var previousValue = _receiptNotes as FixupCollection<ReceiptNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReceiptNotes;
                    }
                    _receiptNotes = value;
                    var newValue = value as FixupCollection<ReceiptNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReceiptNotes;
                    }
                }
            }
        }
        private ICollection<ReceiptNote> _receiptNotes;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCar(Car previousValue)
        {
            if (previousValue != null && previousValue.DeliveryNotes.Contains(this))
            {
                previousValue.DeliveryNotes.Remove(this);
            }
    
            if (Car != null)
            {
                if (!Car.DeliveryNotes.Contains(this))
                {
                    Car.DeliveryNotes.Add(this);
                }
                if (CarId != Car.Id)
                {
                    CarId = Car.Id;
                }
            }
            else if (!_settingFK)
            {
                CarId = null;
            }
        }
    
        private void FixupLocation(Location previousValue)
        {
            if (previousValue != null && previousValue.DeliveryNotes.Contains(this))
            {
                previousValue.DeliveryNotes.Remove(this);
            }
    
            if (Location != null)
            {
                if (!Location.DeliveryNotes.Contains(this))
                {
                    Location.DeliveryNotes.Add(this);
                }
                if (Origin != Location.Id)
                {
                    Origin = Location.Id;
                }
            }
            else if (!_settingFK)
            {
                Origin = null;
            }
        }
    
        private void FixupLocation1(Location previousValue)
        {
            if (previousValue != null && previousValue.DeliveryNotes1.Contains(this))
            {
                previousValue.DeliveryNotes1.Remove(this);
            }
    
            if (Location1 != null)
            {
                if (!Location1.DeliveryNotes1.Contains(this))
                {
                    Location1.DeliveryNotes1.Add(this);
                }
                if (Destination != Location1.Id)
                {
                    Destination = Location1.Id;
                }
            }
            else if (!_settingFK)
            {
                Destination = null;
            }
        }
    
        private void FixupWorker(Worker previousValue)
        {
            if (previousValue != null && previousValue.DeliveryNotes.Contains(this))
            {
                previousValue.DeliveryNotes.Remove(this);
            }
    
            if (Worker != null)
            {
                if (!Worker.DeliveryNotes.Contains(this))
                {
                    Worker.DeliveryNotes.Add(this);
                }
                if (Sender != Worker.Id)
                {
                    Sender = Worker.Id;
                }
            }
            else if (!_settingFK)
            {
                Sender = null;
            }
        }
    
        private void FixupWorker1(Worker previousValue)
        {
            if (previousValue != null && previousValue.DeliveryNotes1.Contains(this))
            {
                previousValue.DeliveryNotes1.Remove(this);
            }
    
            if (Worker1 != null)
            {
                if (!Worker1.DeliveryNotes1.Contains(this))
                {
                    Worker1.DeliveryNotes1.Add(this);
                }
                if (Reciever != Worker1.Id)
                {
                    Reciever = Worker1.Id;
                }
            }
            else if (!_settingFK)
            {
                Reciever = null;
            }
        }
    
        private void FixupReceiptNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReceiptNote item in e.NewItems)
                {
                    item.DeliveryNote = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReceiptNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.DeliveryNote, this))
                    {
                        item.DeliveryNote = null;
                    }
                }
            }
        }

        #endregion
    }
}
