<script type="text/javascript">
    Ext.Loader.setConfig({
        enabled: true
    });
    Ext.Loader.setPath('Ext.ux', '../Scripts/extjs/ext-4.1.1a/examples/ux');

    Ext.Loader.setConfig({ enabled: true });

   // Ext.Loader.setPath('Ext.ux', '../ux');

    Ext.require([
    'Ext.tip.QuickTipManager',
    'Ext.container.Viewport',
    'Ext.layout.*',
    'Ext.form.Panel',
    'Ext.form.Label',
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.tree.*',
    'Ext.selection.*',
    'Ext.tab.Panel',
    'Ext.ux.layout.Center',
    'Ext.util.*',
    'Ext.state.*'
]);

    //
    // This is the main layout definition.
    //
    var grid;
    Ext.onReady(function () {

        Ext.tip.QuickTipManager.init();

        // This is an inner body element within the Details panel created to provide a "slide in" effect
        // on the panel body without affecting the body's box itself.  This element is created on
        // initial use and cached in this var for subsequent access.
        var detailEl;

        // Gets all layouts examples
        var layoutExamples = [];
        //        Ext.Object.each(getBasicLayouts(), function (name, example) {
        //            layoutExamples.push(example);
        //        });

        //        Ext.Object.each(getCombinationLayouts(), function (name, example) {
        //            layoutExamples.push(example);
        //        });

        //        Ext.Object.each(getCustomLayouts(), function (name, example) {
        //            layoutExamples.push(example);
        //        });

        // This is the main content center region that will contain each example layout panel.
        // It will be implemented as a CardLayout since it will contain multiple panels with
        // only one being visible at any given time.-------------------------------------------------------------------------------------
        

        // setup the state provider, all state information will be saved to a cookie
        Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));
        var myData = [
        ['3m Co', 71.72, 0.02, 0.03, '9/1 12:00am'],
        ['Alcoa Inc', 29.01, 0.42, 1.47, '9/1 12:00am'],
        ['Altria Group Inc', 83.81, 0.28, 0.34, '9/1 12:00am'],
        ['American Express Company', 52.55, 0.01, 0.02, '9/1 12:00am'],
        ['American International Group, Inc.', 64.13, 0.31, 0.49, '9/1 12:00am'],
        ['AT&T Inc.', 31.61, -0.48, -1.54, '9/1 12:00am'],
        ['Boeing Co.', 75.43, 0.53, 0.71, '9/1 12:00am'],
        ['Caterpillar Inc.', 67.27, 0.92, 1.39, '9/1 12:00am'],
        ['Citigroup, Inc.', 49.37, 0.02, 0.04, '9/1 12:00am'],
        ['E.I. du Pont de Nemours and Company', 40.48, 0.51, 1.28, '9/1 12:00am'],
        ['Exxon Mobil Corp', 68.1, -0.43, -0.64, '9/1 12:00am'],
        ['General Electric Company', 34.14, -0.08, -0.23, '9/1 12:00am'],
        ['General Motors Corporation', 30.27, 1.09, 3.74, '9/1 12:00am'],
        ['Hewlett-Packard Co.', 36.53, -0.03, -0.08, '9/1 12:00am'],
        ['Honeywell Intl Inc', 38.77, 0.05, 0.13, '9/1 12:00am'],
        ['Intel Corporation', 19.88, 0.31, 1.58, '9/1 12:00am'],
        ['International Business Machines', 81.41, 0.44, 0.54, '9/1 12:00am'],
        ['Johnson & Johnson', 64.72, 0.06, 0.09, '9/1 12:00am'],
        ['JP Morgan & Chase & Co', 45.73, 0.07, 0.15, '9/1 12:00am'],
        ['McDonald\'s Corporation', 36.76, 0.86, 2.40, '9/1 12:00am'],
        ['Merck & Co., Inc.', 40.96, 0.41, 1.01, '9/1 12:00am'],
        ['Microsoft Corporation', 25.84, 0.14, 0.54, '9/1 12:00am'],
        ['Pfizer Inc', 27.96, 0.4, 1.45, '9/1 12:00am'],
        ['The Coca-Cola Company', 45.07, 0.26, 0.58, '9/1 12:00am'],
        ['The Home Depot, Inc.', 34.64, 0.35, 1.02, '9/1 12:00am'],
        ['The Procter & Gamble Company', 61.91, 0.01, 0.02, '9/1 12:00am'],
        ['United Technologies Corporation', 63.26, 0.55, 0.88, '9/1 12:00am'],
        ['Verizon Communications', 35.57, 0.39, 1.11, '9/1 12:00am'],
        ['Wal-Mart Stores, Inc.', 45.45, 0.73, 1.63, '9/1 12:00am']
    ];

     
    
        function change(val) {
            if (val > 0) {
                return '<span style="color:green;">' + val + '</span>';
            } else if (val < 0) {
                return '<span style="color:red;">' + val + '</span>';
            }
            return val;
        }

   
        function pctChange(val) {
            if (val > 0) {
                return '<span style="color:green;">' + val + '%</span>';
            } else if (val < 0) {
                return '<span style="color:red;">' + val + '%</span>';
            }
            return val;
        }

        // create the data store
   
         grid = Ext.create('Ext.grid.Panel', {
            id:'grid',
            store: store,
            stateful: true,
            collapsible: true,
            multiSelect: true,
            stateId: 'stateGrid',
            columns: [
                {
                    text: 'Company',
                    flex: 1,
                    sortable: false,
                    dataIndex: 'company'
                },
                {
                    text: 'Price',
                    width: 75,
                    sortable: true,
                    renderer: 'usMoney',
                    dataIndex: 'price'
                },
                {
                    text: 'Change',
                    width: 75,
                    sortable: true,
                    renderer: change,
                    dataIndex: 'change'
                },
                {
                    text: '% Change',
                    width: 75,
                    sortable: true,
                    renderer: pctChange,
                    dataIndex: 'pctChange'
                },
                {
                    text: 'Last Updated',
                    width: 85,
                    sortable: true,
                    renderer: Ext.util.Format.dateRenderer('m/d/Y'),
                    dataIndex: 'lastChange'
                },
                {
                    menuDisabled: true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 50,
                    items: [{
                            icon: '../shared/icons/fam/delete.gif',  // Use a URL in the icon config
                            tooltip: 'Sell stock',
                            handler: function(grid, rowIndex, colIndex) {
                                var rec = store.getAt(rowIndex);
                                alert("Sell " + rec.get('company'));
                            }
                        }, {
                            getClass: function(v, meta, rec) { // Or return a class from a function
                                if (rec.get('change') < 0) {
                                    this.items[1].tooltip = 'Hold stock';
                                    return 'alert-col';
                                } else {
                                    this.items[1].tooltip = 'Buy stock';
                                    return 'buy-col';
                                }
                            },
                            handler: function(grid, rowIndex, colIndex) {
                                var rec = store.getAt(rowIndex);
                                alert((rec.get('change') < 0 ? "Hold " : "Buy ") + rec.get('company'));
                            }
                        }]
                }
            ],
            
            title: 'Array Grid',
            region: 'south'
            //renderTo: 'grid-example',
         
        });
        var contentPanel = {
            id: 'content-panel',
            region: 'center', // this is what makes this panel into a region within the containing layout
            layout: 'card',
            margins: '2 5 5 0',
            activeItem: 0,
            border: false,
            items: layoutExamples
        };

        var store = Ext.create('Ext.data.TreeStore', {
            root: {
                expanded: true
            },
            proxy: {
                type: 'ajax',
                url: 'tree-data.json'
            }
        });

        // Go ahead and create the TreePanel now so that we can use it below-----------------------------------------------------------
        var treePanel = Ext.create('Ext.tree.Panel', {
            id: 'tree-panel',
            title: 'Sample Layouts',
            region: 'north',
            split: true,
            height: 360,
            minSize: 150,
            rootVisible: false,
            autoScroll: true,
            store: store
        });

        // Assign the changeLayout function to be called on tree node click.
        treePanel.getSelectionModel().on('select', function (selModel, record) {
            if (record.get('leaf')) {
                Ext.getCmp('content-panel').layout.setActiveItem(record.getId() + '-panel');
                if (!detailEl) {
                    var bd = Ext.getCmp('details-panel').body;
                    bd.update('').setStyle('background', '#fff');
                    detailEl = bd.createChild(); //create default empty div
                }
                detailEl.hide().update(Ext.getDom(record.getId() + '-details').innerHTML).slideIn('l', { stopAnimation: true, duration: 200 });
            }
        });

        // This is the Details panel that contains the description for each example layout.-------------------------------------------------
        var detailsPanel = {
            id: 'details-panel',
            title: 'Details',
            region: 'center',
            bodyStyle: 'padding-bottom:15px;background:#eee;',
            autoScroll: true,
            html: '<p class="details-info">When you select a layout from the tree, additional details will display here.</p>'
        };

        // Finally, build the main layout once all the pieces are ready.  This is also a good
        // example of putting together a full-screen BorderLayout within a Viewport.
        Ext.create('Ext.Viewport', {
            layout: 'border',
            title: 'Ext Layout Browser',
            items: [{
                xtype: 'box',
                id: 'header',
                region: 'north',
                html: '<h1> Ext.Layout.Browser</h1>',
                height: 30
            }, {
                layout: 'border',
                id: 'layout-browser-w',
                region: 'west',
                border: false,
                split: true,
                margins: '2 0 5 5',
                width: 275,
                minSize: 100,
                maxSize: 500,
                items: [treePanel]
            },
                 {
                     layout: 'border',
                     id: 'layout-browser-e',
                     region: 'east',
                     border: false,
                     split: true,
                     margins: '2 0 5 5',
                     width: 275,
                     minSize: 100,
                     maxSize: 500,
                     items: [detailsPanel]
                 },
           contentPanel,grid],
            renderTo: 'ds'//Ext.getBody()
        });
    });
 </script>