//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace DAL.Models
{
    public partial class DeliveryNotes
    {
        #region Primitive Properties
    
        public virtual decimal Id
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> OriginId
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> DestinationId
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeliveryDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DocumentDate
        {
            get;
            set;
        }
    
        public virtual string SerderName
        {
            get;
            set;
        }
    
        public virtual string SenderCode
        {
            get;
            set;
        }
    
        public virtual string CarType
        {
            get;
            set;
        }
    
        public virtual string CarLicensePlate
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ReceitpNote ReceitpNote
        {
            get { return _receitpNote; }
            set
            {
                if (!ReferenceEquals(_receitpNote, value))
                {
                    var previousValue = _receitpNote;
                    _receitpNote = value;
                    FixupReceitpNote(previousValue);
                }
            }
        }
        private ReceitpNote _receitpNote;
    
        public virtual ICollection<NoteLineItem> NoteLineItem
        {
            get
            {
                if (_noteLineItem == null)
                {
                    var newCollection = new FixupCollection<NoteLineItem>();
                    newCollection.CollectionChanged += FixupNoteLineItem;
                    _noteLineItem = newCollection;
                }
                return _noteLineItem;
            }
            set
            {
                if (!ReferenceEquals(_noteLineItem, value))
                {
                    var previousValue = _noteLineItem as FixupCollection<NoteLineItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNoteLineItem;
                    }
                    _noteLineItem = value;
                    var newValue = value as FixupCollection<NoteLineItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNoteLineItem;
                    }
                }
            }
        }
        private ICollection<NoteLineItem> _noteLineItem;

        #endregion
        #region Association Fixup
    
        private void FixupReceitpNote(ReceitpNote previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.DeliveryNotes, this))
            {
                previousValue.DeliveryNotes = null;
            }
    
            if (ReceitpNote != null)
            {
                ReceitpNote.DeliveryNotes = this;
            }
        }
    
        private void FixupNoteLineItem(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (NoteLineItem item in e.NewItems)
                {
                    item.DeliveryNotes = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (NoteLineItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.DeliveryNotes, this))
                    {
                        item.DeliveryNotes = null;
                    }
                }
            }
        }

        #endregion
    }
}
