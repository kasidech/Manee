


<style type="text/css">
    #icon-grid {
        visibility: hidden;  
    }
</style>
<script type="text/javascript">
    Ext.Loader.setConfig({
        enabled: true
    });
    Ext.Loader.setPath('Ext.ux', '../Scripts/extjs/ext-4.1.1a/examples/ux');

    Ext.Loader.setConfig({ enabled: true });
    Ext.require([
    'Ext.tip.QuickTipManager',
    'Ext.container.Viewport',
    'Ext.layout.*',
    'Ext.form.Panel',
    'Ext.form.Label',
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.tree.*',
    'Ext.selection.*',
    'Ext.tab.Panel',
    'Ext.ux.layout.Center',
    'Ext.util.*',
    'Ext.state.*',
    'Ext.selection.CellModel',
        'Ext.form.*',
    'Ext.ux.CheckColumn',

    'Ext.selection.CheckboxModel',
    'Ext.panel.Panel',
    'Ext.view.View',
    'Ext.layout.container.Fit',
    'Ext.toolbar.Paging',
    'Ext.ux.form.SearchField',
    'Ext.toolbar.TextItem',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Text',
        'Ext.ux.statusbar.StatusBar',
     'Ext.ux.LiveSearchGridPanel',
    'Ext.toolbar.Paging',
    'Ext.ux.PreviewPlugin',
    'Ext.ModelManager',
    'Ext.tip.QuickTipManager'
]);

    var storeSearch;
    Ext.onReady(function () {

        Ext.QuickTips.init();

        var bd = Ext.getBody();

        // sample static data for the store
        var myData = [[
            '001',
            20,
            's1000',
            'Noo9',
            'FishSouce',
            3,
            'ton',
            '',
            '']];

        var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
            clicksToEdit: 1
        });
        var ds = Ext.create('Ext.data.ArrayStore', {
            fields: [
            { name: 'DeliveryNoteNo' },
            { name: 'RequestNo' },
            { name: 'OldCode' },
            { name: 'NewCode' },
            { name: 'ItemDetail' },
            { name: 'Qty', type: 'int' },
            { name: 'Unit' },
            { name: 'Remark' },
            { name: 'Date', type: 'date', dateFormat: 'n/j h:ia' }

        ],
            data: myData
        });


        // example of custom renderer function





        /*
        * Here is where we create the Form
        */
        var gridForm = Ext.create('Ext.form.Panel', {
            id: 'company-form',
            frame: true,
            minHeight: 80,
            // title: 'DeliveryNote',
            //bodyPadding: 5,
            defaults: {
                layout: 'anchor',
                defaults: {
                    anchor: '100%'
                }
            },

            //layout: 'column',    // Specifies that the items will now be arranged in columns

            fieldDefaults: {
                labelAlign: 'left',
                msgTarget: 'side'
            },

            items: [
            {
                columnWidth: 1.00,
                margin: '0 0 0 0',
                xtype: 'fieldset',
                title: 'Company details',
                defaults: {
                    width: 500,
                    flex: 1,
                    labelWidth: 0.50

                },
                defaultType: 'textfield',
                items: [{
                    fieldLabel: 'Del No. ',
                    name: 'DelNo'
                }, {
                    xtype: 'datefield',
                    fieldLabel: 'Date ',
                    name: 'lastChange'
                }, {
                    fieldLabel: 'From ',
                    name: 'From'
                }, {
                    fieldLabel: 'To ',
                    name: 'To'
                }]
            }, {
                columnWidth: 1.00,
                xtype: 'gridpanel',
                store: ds,
                minHeight: 400,
                autoScroll: true,

                columns: [
                    new Ext.grid.RowNumberer(),

                {
                    header: 'Request No',

                    dataIndex: 'RnNo',
                    flex: 1,
                    sortable: true,

                    editor: new Ext.form.field.ComboBox({
                        typeAhead: true,
                        triggerAction: 'all',
                        selectOnTab: true,
                        store: [
                    ['Shade', 'Shade'],
                    ['Mostly Shady', 'Mostly Shady'],
                    ['Sun or Shade', 'Sun or Shade'],
                    ['Mostly Sunny', 'Mostly Sunny'],
                    ['Sunny', 'Sunny']
                ],
                        lazyRender: true,
                        listClass: "x-combo-list-small"
                    })
                },
                {
                    header: 'Old Code',

                    flex: 1,
                    editor: {}

                },
                {
                    header: 'New Code',

                    flex: 1,
                    sortable: true,
                    editor: {}
                },
                {
                    header: 'รายการ',
                    dataIndex: 'ItemDetail',

                    flex: 1,
                    sortable: true,

                    editor: new Ext.form.field.ComboBox({
                        typeAhead: true,
                        triggerAction: 'all',
                        selectOnTab: true,
                        store: [
                    ['Shade', 'Shade'],
                    ['Mostly Shady', 'Mostly Shady'],
                    ['Sun or Shade', 'Sun or Shade'],
                    ['Mostly Sunny', 'Mostly Sunny'],
                    ['Sunny', 'Sunny']
                ],
                        lazyRender: true,
                        listClass: "x-combo-list-small"
                    })
                },
                {
                    header: 'Qty',

                    flex: 1,
                    dataIndex: 'Qty',
                    editor: {}
                },
                {
                    header: 'Unit',

                    flex: 1,
                    dataIndex: 'ItemUnit',
                    editor: {}
                },
                {
                    header: 'Remark',

                    sortable: true,
                    dataIndex: 'Remark',
                    editor: {}
                }
            ], bbar: [
                   { xtype: 'textfield', fieldLabel: 'Sender', dataIndex: 'Sender', height: 25, editor: {} },
                   { xtype: 'textfield', fieldLabel: 'Receiver', dataIndex: 'Receiver', height: 25, editor: {} },
                   { xtype: 'textfield', fieldLabel: 'Truck No.', dataIndex: 'TruckNo', height: 25, editor: {}}]

               , plugins: [cellEditing]

            }],
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'bottom',
                ui: 'footer',
                layout: {
                    pack: 'center'
                },
                items: [{
                    minWidth: 80,
                    text: 'Save',
                    handler: function () {

                    }
                }, {
                    minWidth: 80,
                    text: 'Cancel'
                }]
            }]
            //renderTo: 'r',

        });
        var searchData = [['PO: 0000000 HHHSSS', '20-1-12', 'SCG', 'SCG \n Description \n'],
                          ['OD: 0000000 HHHSSS', '20-1-12', 'SCG', ' Description Description Description Description ...']];
        storeSearch = Ext.create('Ext.data.ArrayStore', {

            fields: [
                { name: 'title' },
                { name: 'lastpost', type: 'date', dateFormat: 'timestamp' },
                { name: 'ProjectName' },
                { name: 'excerpt' }

            ],
            data: searchData
        });




        // pluggable renders
        function renderTopic(value, p, record) {
            return Ext.String.format(

        );
        }

        function renderLast(value, p, r) {

            var isAttach = 2;
            if (isAttach == 1) {
                return '<img src="../../Scripts/extjs/ext-4.1.1a/resources/themes/images/gray/dd/drop-add.gif" />'; //Add Picture For Attrachment
            }
            else if (isAttach == 2) {
                return '<img src="../../Scripts/extjs/ext-4.1.1a/resources/themes/images/gray/dd/drop-no.gif" />'; //Add Picture For Other status
            }


            // return '<a style="background:url(../../Scripts/extjs/ext-4.1.1a/resources/themes/images/gray/dd/drop-add.gif)"></a>';
            // return Ext.String.format('{0}<br/>by {1}', Ext.Date.dateFormat(value, 'M j, Y, g:i a'), r.get('lastposter'));
        }





        // create the Grid, see Ext. 
        var searchForm = Ext.create('Ext.form.Panel', {
            id: 'search-form',
            frame: true,
            region: 'north',
            //title: 'DeliveryNote',
            //bodyPadding: 5,
            width: 300,

            layout: 'column',    // Specifies that the items will now be arranged in columns

            fieldDefaults: {
                labelAlign: 'top',
                msgTarget: 'side'
            },

            items: [{

                xtype: 'textfield',
                fieldLabel: 'Search ',
                name: 'Search'

            }, {

                xtype: 'textfield',
                fieldLabel: 'filter ',
                name: 'filter'

            }]


        });

        var sm = Ext.create('Ext.selection.CheckboxModel', { injectCheckbox: 'last' });
        var searchGrid = Ext.create('Ext.grid.Panel', {
            width: 300,
            selModel: sm,

            iconCls: 'icon-grid',
            height: 400,
            region: 'center',
            //title: 'ExtJS.com - Browse Forums',
            layout: 'column',
            store: storeSearch,
            //disableSelection: true,
            loadMask: true,

            viewConfig: {
                id: 'gv',
                trackOver: false,
                stripeRows: false,
                plugins: [{
                    ptype: 'preview',
                    bodyField: 'excerpt',
                    expanded: true,
                    pluginId: 'preview'
                }]
            },
            // grid columns
            columns: [{

                id: 'topic',
                text: "Topic",
                dataIndex: 'title',
                flex: 1,
                //renderer: renderTopic,
                sortable: false
            }, {
                id: 'last',
                text: "Last Post",
                dataIndex: 'lastpost',
                renderer: renderLast,
                width: 25,
                align: 'right',
                editor: {
                    click: {}
                }
                //sortable: true
            }]


        });

        var sm2 = Ext.create('Ext.selection.CheckboxModel', { injectCheckbox: 'last' });
        var searchGrid2 = Ext.create('Ext.ux.LiveSearchGridPanel', {
            width: 300,
            selModel: sm2,

            iconCls: 'icon-grid',
            height: 400,
            region: 'center',
            //title: 'ExtJS.com - Browse Forums',
            layout: 'column',
            store: storeSearch,
            //disableSelection: true,
            loadMask: true,

            viewConfig: {

                trackOver: false,
                stripeRows: true,
                plugins: [{
                    ptype: 'preview',
                    bodyField: 'excerpt',
                    expanded: true,
                    pluginId: 'preview'
                }]
            },
            // grid columns
            columns: [{


                text: "Topic",
                dataIndex: 'title',
                flex: 1,
                //renderer: renderTopic,
                sortable: false
            }, {

                text: "Last Post",
                dataIndex: 'lastpost',
                renderer: renderLast,
                width: 25,
                align: 'right',
                editor: {
                    click: {}
                }
                //sortable: true
            }]


        });
        Ext.create('Ext.Viewport',
            {
                layout: 'border',
                title: 'Ext Layout Browser',
                items: [{
                    layout: 'border',
                    id: 'searchField',
                    collapsible: true,
                    floatable: false,
                    region: 'west',
                    border: false,
                    split: true,
                    width: 300,
                    minSize: 100,
                    maxSize: 500,
                    margins: '2 0 5 5',
                    autoScroll: true,
                    items: [searchGrid2]
                }, {
                    //layout: 'border',
                    id: 'layout-browser-grid',

                    floatable: true,
                    region: 'center',
                    border: false,
                    split: false,
                    margins: '2 0 5 5',
                    defaults: {
                        layout: 'anchor',
                        defaults: {
                            anchor: '100%'
                        }
                    },
                    autoScroll: true,
                    items: [gridForm]

                }
                , {
                    layout: 'border',
                    id: 'layout-browser-east',
                    collapsible: true,
                    floatable: true,
                    region: 'east',
                    border: false,
                    split: false,
                    margins: '2 0 5 5',
                    width: 275,
                    minSize: 100,
                    maxSize: 500,
                    autoScroll: true,
                    items: []
                }
            ],
                renderTo: 'r'

            });
    });
</script>

